function [ ER,CMS,validationPredictions ] = neural_network_nfold( predictors,response,cliptypes )
% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by NPRTOOL
%

inputs = predictors';
targets = zeros(length(unique(response)),length(response));
for i=1:length(response)
    targets(response(i),i)=1;
end

% Create a Pattern Recognition Network
hiddenLayerSize = 100;

k=10;
n_fold=cell(k,1);
num=zeros(length(cliptypes),1);
for i=1:length(cliptypes)
    num(i)=sum(response==i);
end

if k<=min(num)
    %%% if the amount of fold is less than the leat number of behaviour
    for i=1:length(cliptypes)
        ind=find(response==i);
        a=randperm(length(ind));
        index=[];
        for ii=1:length(ind)
            index(ii)=ind(a(ii));
        end
        for n=1:k
            start=fix(length(index)/k)*(n-1)+1;
            if n<k
                n_fold{n}=[n_fold{n} index(start:start+fix(length(index)/k)-1)];
            else
                n_fold{n}=[n_fold{n} index(start:end)];
            end
        end
    end
else
    index=randperm(length(response));
    for n=1:k
        start=fix(length(index)/k)*(n-1)+1;
        if n<k
            n_fold{n}=index(start:start+fix(length(index)/k)-1);
        else
            n_fold{n}=index(start:end);
        end
    end
end

outputs=zeros(length(unique(response)),length(response));
for n=1:k
    trainIndex=[];
    for ii=1:k
        if ii~=n
            trainIndex=[trainIndex n_fold{ii}];
        end
    end
%%% custom network
% %     net = feedforwardnet([hiddenLayerSize]);
%     net =patternnet([hiddenLayerSize]);
% %     net.layers{1}.transferFcn = 'poslin';
% %     net.layers{2}.transferFcn = 'poslin';
% %     net.layers{3}.transferFcn = 'softmax';
% 
% %     net = patternnet(hiddenLayerSize);
%     net.layers{1}.transferFcn = 'satlin';
% %     net.layers{1}.transferFcn = 'poslin';
% %     net.trainParam.lr = 0.0001;
% %     net.trainFcn = 'traingd';
%     net.divideParam.trainRatio = 85/100;
%     net.divideParam.valRatio = 15/100;
%     net.divideParam.testRatio = 0/100;
%     net= train(net,inputs(:,trainIndex),targets(:,trainIndex));
%     preds= net(inputs(:,n_fold{n}));
%     for i=1:length(preds)
%         [a,b]=max(preds(:,i));
%         preds_number(i,1)=b;
%     end
%     acc = sum(preds_number==response(n_fold{n}))/length(preds);
%     outputs(:,n_fold{n})=preds;

%%% cnn
%  complete the config.m to config the network structure;
cnnConfig = config1();
%  calling cnnInitParams() to initialize parameters
[theta meta] = cnnInitParams1(cnnConfig);
options.epochs = 3;
options.minibatch = 4;
options.alpha = 1e-2;
options.momentum = .95;

opttheta = minFuncSGD(@(x,y,z) cnnCost(x,y,z,cnnConfig,meta),theta,inputs(:,trainIndex),response(trainIndex,:),options);
[cost,grad,preds,output]=cnnCost(opttheta,inputs(:,n_fold{n}),response(n_fold{n},:),cnnConfig,meta,true);
acc = sum(preds==response(n_fold{n},:))/length(preds);
preds_matrix = zeros(length(unique(response)),length(preds));
for i=1:length(preds)
    preds_matrix(preds(i),i)=1;
end
 outputs(:,n_fold{n})=output;
 
end

% View the Network
% view(net)


figure(1), h1=plotconfusion(targets,outputs);
set(gca,'xticklabel',[cliptypes,' ']);
set(gca,'yticklabel',[cliptypes,' ']);
saveas(h1,'confusion.fig');
% set(gcf,'Visible','off');

test_ind=[tr.testInd tr.valInd];
test_targets=targets(:,test_ind);
test_labels=response(test_ind);
test_outputs=outputs(:,test_ind);
figure(2);
x=cell(length(cliptypes),1);
y=cell(length(cliptypes),1);
acu=zeros(length(cliptypes),1);
for i=1:length(cliptypes)
    [x{i},y{i},~,acu(i)] = perfcurve(test_labels,test_outputs(i,:),i);
end
hold on
title('ROC')
set(gca, 'LineStyleOrder', {'-'});
for ii=1:length(cliptypes)
    h2=plot(x{ii}, y{ii},'LineWidth',2);
end
legend(cliptypes);
ylim([0.6,1]);
save('roc.mat','test_labels','test_outputs');
save('acu.mat','acu');
saveas(h2,'roc.fig');
% set(gcf,'Visible','off');

end

